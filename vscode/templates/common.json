{
    "cells": [
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Modality Python SDK\n",
                "from urllib.parse import urlparse, urlencode\n",
                "from copy import deepcopy\n",
                "import appdirs\n",
                "import os\n",
                "import os.path\n",
                "from urllib.request import urlopen, Request\n",
                "import json\n",
                "\n",
                "class Modality:\n",
                "    modality_url = 'http://localhost:14181/v1'\n",
                "    auth_token = None\n",
                "\n",
                "    def __init__(self, modality_url=None, auth_token=None):\n",
                "        if modality_url:\n",
                "            self.modality_url = modality_url\n",
                "        self.auth_token = auth_token\n",
                "\n",
                "        if not self.modality_url:\n",
                "            if 'MODALITY_URL' in os.environ:\n",
                "                self.modality_url = os.environ.get('MODALITY_URL').rstrip()\n",
                "            else:\n",
                "                modality_toml = appdirs.user_config_dir('modality.toml')\n",
                "                if os.path.exists(modality_toml):\n",
                "                    modality_toml_dict = toml.load(modality_toml)\n",
                "                    if modality_toml_dict['modalityd']:\n",
                "                        self.modality_url = modality_toml_dict['modalityd']\n",
                "\n",
                "        if not self.auth_token:\n",
                "            cli_config_dir = appdirs.user_config_dir('modality_cli')\n",
                "            token_file = os.path.join(cli_config_dir, '.user_auth_token')\n",
                "            if 'MODALITY_AUTH_TOKEN' in os.environ:\n",
                "                self.auth_token = os.environ.get('MODALITY_AUTH_TOKEN').rstrip()\n",
                "            elif os.path.exists(token_file):\n",
                "                with open(token_file, 'r') as file:\n",
                "                    self.auth_token = file.read().rstrip()\n",
                "\n",
                "    def _modality_url(self, endpoint, query_params):\n",
                "        url = self.modality_url\n",
                "        if not url.endswith(\"/\"):\n",
                "            url += \"/\"\n",
                "        url += endpoint\n",
                "        if query_params:\n",
                "            url += \"?\" + urlencode(query_params)\n",
                "\n",
                "        return url\n",
                "    \n",
                "    def _flat_scope_url_params(self, workspace_name=None, workspace_version_id=None, segments=None,\n",
                "                               only_newest_segment_in_workspace=None, timeline_filter=None):\n",
                "        url_params = []\n",
                "\n",
                "        # scope\n",
                "        if workspace_name:\n",
                "            url_params.append(('workspace_name', workspace_name))\n",
                "\n",
                "        if workspace_version_id:\n",
                "            url_params.append(('workspace_version_id', workspace_version_id))\n",
                "\n",
                "        if segments:\n",
                "            for seg in segments:\n",
                "                url_params.append(('segments', seg))\n",
                "\n",
                "        if only_newest_segment_in_workspace:\n",
                "            url_params.append(\n",
                "                ('only_newest_segment_in_workspace', 'true' if only_newest_segment_in_workspace else 'false'))\n",
                "\n",
                "        if timeline_filter:\n",
                "            url_params.append(('timeline_filter', timeline_filter))\n",
                "\n",
                "        return url_params\n",
                "    \n",
                "    def _events_data_frame_url(self,\n",
                "                               workspace_name=None, workspace_version_id=None, segments=None,\n",
                "                               only_newest_segment_in_workspace=None, timeline_filter=None,\n",
                "                               split_by_segment=None, event_filter=None, include_timeline_attrs=None,\n",
                "                               include_attrs=None):\n",
                "\n",
                "        url_params = self._flat_scope_url_params(workspace_name=workspace_name,\n",
                "                                                 workspace_version_id=workspace_version_id, segments=segments,\n",
                "                                                 only_newest_segment_in_workspace=only_newest_segment_in_workspace,\n",
                "                                                 timeline_filter=timeline_filter)\n",
                "\n",
                "        if split_by_segment:\n",
                "            url_params.append(('split_by_segment', 'true' if split_by_segment else 'false'))\n",
                "\n",
                "        if event_filter:\n",
                "            url_params.append(('event_filter', event_filter))\n",
                "\n",
                "        if include_timeline_attrs:\n",
                "            url_params.append(('include_timeline_attrs', 'true' if include_timeline_attrs else 'false'))\n",
                "\n",
                "        if include_attrs:\n",
                "            for attr in include_attrs:\n",
                "                url_params.append(('include_attrs', attr))\n",
                "\n",
                "        return self._modality_url(\"inspection/events_data_frame\", url_params)\n",
                "    \n",
                "    def events_data_frame(self,\n",
                "                          workspace_name=None, workspace_version_id=None, segments=None,\n",
                "                          only_newest_segment_in_workspace=None, timeline_filter=None,\n",
                "                          split_by_segment=None, event_filter=None, include_timeline_attrs=None, include_attrs=None):\n",
                "        r\"\"\"Load events from Modality into a pandas dataframe.\n",
                "\n",
                "        :param str workspace_name: Limit fetched events to those contained in this workspace.\n",
                "        :param str workspace_version_id: Limit fetched events to those contained in this workspace.\n",
                "        :param array[str] segments: Limit to events from these segments. Workspace must also be specified.\n",
                "        :param bool only_newest_segment_in_workspace: If you specified the workspace, limit to the newest segment in that workspace.\n",
                "        :param timeline_filter: Limit to events logged on timelines which match this Modality filter expression. e.g. \"_.name = 'bar'\".\n",
                "        :param bool split_by_segment: Split the results into segments, for all available segments. Include columns with segment         information in the dataframe.\n",
                "        :param event_filter: Limit to events passing this Modality filter expression. e.g. \"_.name = 'foo'\".\n",
                "        :param bool include_timeline_attrs: Include \"timeline.*\" columns in the dataframe.\n",
                "        :param array[str] include_attrs: Include these specific attrs on each event.\n",
                "        \"\"\"\n",
                "\n",
                "        url = self._events_data_frame_url(workspace_name=workspace_name, workspace_version_id=workspace_version_id,\n",
                "                                          segments=segments,\n",
                "                                          only_newest_segment_in_workspace=only_newest_segment_in_workspace,\n",
                "                                          timeline_filter=timeline_filter,\n",
                "                                          split_by_segment=split_by_segment, event_filter=event_filter,\n",
                "                                          include_timeline_attrs=include_timeline_attrs, include_attrs=include_attrs)\n",
                "\n",
                "        import pandas as pd\n",
                "        dtype_dict = {'event.timestamp': 'datetime64[ns]',\n",
                "                      'segment.latest_receive_time': 'datetime64[ns]'}\n",
                "\n",
                "        storage_options = {}\n",
                "        if self.auth_token:\n",
                "            storage_options['X-Auxon-Auth-Token'] = self.auth_token\n",
                "\n",
                "        df = pd.read_json(url, lines=True, dtype=dtype_dict, storage_options=storage_options)\n",
                "        return df"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Import plotly\n",
                "import plotly.io as pio\n",
                "import plotly.express as px\n",
                "import plotly.graph_objects as go\n",
                "pio.renderers.default = 'notebook'\n"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.10.12"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 2
}
