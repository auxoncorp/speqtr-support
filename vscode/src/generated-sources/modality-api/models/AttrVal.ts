/* tslint:disable */
/* eslint-disable */
/**
 * Modality REST API
 * Modality REST API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@auxon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    TaggedBigInt,
    instanceOfTaggedBigInt,
    TaggedBigIntFromJSON,
    TaggedBigIntFromJSONTyped,
    TaggedBigIntToJSON,
} from './TaggedBigInt';
import {
    TaggedEventCoordinate,
    instanceOfTaggedEventCoordinate,
    TaggedEventCoordinateFromJSON,
    TaggedEventCoordinateFromJSONTyped,
    TaggedEventCoordinateToJSON,
} from './TaggedEventCoordinate';
import {
    TaggedLogicalTime,
    instanceOfTaggedLogicalTime,
    TaggedLogicalTimeFromJSON,
    TaggedLogicalTimeFromJSONTyped,
    TaggedLogicalTimeToJSON,
} from './TaggedLogicalTime';
import {
    TaggedNonFiniteFloat,
    instanceOfTaggedNonFiniteFloat,
    TaggedNonFiniteFloatFromJSON,
    TaggedNonFiniteFloatFromJSONTyped,
    TaggedNonFiniteFloatToJSON,
} from './TaggedNonFiniteFloat';
import {
    TaggedTimelineId,
    instanceOfTaggedTimelineId,
    TaggedTimelineIdFromJSON,
    TaggedTimelineIdFromJSONTyped,
    TaggedTimelineIdToJSON,
} from './TaggedTimelineId';
import {
    TaggedTimestamp,
    instanceOfTaggedTimestamp,
    TaggedTimestampFromJSON,
    TaggedTimestampFromJSONTyped,
    TaggedTimestampToJSON,
} from './TaggedTimestamp';

/**
 * @type AttrVal
 * 
 * @export
 */
export type AttrVal = TaggedBigInt | TaggedEventCoordinate | TaggedLogicalTime | TaggedNonFiniteFloat | TaggedTimelineId | TaggedTimestamp | boolean | number | string;

export function AttrValFromJSON(json: any): AttrVal {
    return AttrValFromJSONTyped(json, false);
}

export function AttrValFromJSONTyped(json: any, ignoreDiscriminator: boolean): AttrVal {
    if ((json === undefined) || (json === null)) {
        return json;
    }

    const ty = typeof(json);
    if (ty === 'boolean' || ty === 'number' || ty === 'string') {
        return json;
    }

    return { ...TaggedBigIntFromJSONTyped(json, true), ...TaggedEventCoordinateFromJSONTyped(json, true), ...TaggedLogicalTimeFromJSONTyped(json, true), ...TaggedNonFiniteFloatFromJSONTyped(json, true), ...TaggedTimelineIdFromJSONTyped(json, true), ...TaggedTimestampFromJSONTyped(json, true) };
}

export function AttrValToJSON(value?: AttrVal | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    const ty = typeof(value);
    if (ty === 'boolean' || ty === 'number' || ty === 'string') {
        return value;
    }

    if (instanceOfTaggedBigInt(value)) {
        return TaggedBigIntToJSON(value as TaggedBigInt);
    }
    if (instanceOfTaggedEventCoordinate(value)) {
        return TaggedEventCoordinateToJSON(value as TaggedEventCoordinate);
    }
    if (instanceOfTaggedLogicalTime(value)) {
        return TaggedLogicalTimeToJSON(value as TaggedLogicalTime);
    }
    if (instanceOfTaggedNonFiniteFloat(value)) {
        return TaggedNonFiniteFloatToJSON(value as TaggedNonFiniteFloat);
    }
    if (instanceOfTaggedTimelineId(value)) {
        return TaggedTimelineIdToJSON(value as TaggedTimelineId);
    }
    if (instanceOfTaggedTimestamp(value)) {
        return TaggedTimestampToJSON(value as TaggedTimestamp);
    }

    return {};
}

