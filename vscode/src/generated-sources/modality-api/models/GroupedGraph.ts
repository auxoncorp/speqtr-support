/* tslint:disable */
/* eslint-disable */
/**
 * Modality REST API
 * Modality REST API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@auxon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GroupedGraphEdge } from './GroupedGraphEdge';
import {
    GroupedGraphEdgeFromJSON,
    GroupedGraphEdgeFromJSONTyped,
    GroupedGraphEdgeToJSON,
} from './GroupedGraphEdge';
import type { GroupedGraphNode } from './GroupedGraphNode';
import {
    GroupedGraphNodeFromJSON,
    GroupedGraphNodeFromJSONTyped,
    GroupedGraphNodeToJSON,
} from './GroupedGraphNode';

/**
 * A graph created by grouping together events by their attribute values.
 * @export
 * @interface GroupedGraph
 */
export interface GroupedGraph {
    /**
     * The grouping keys used to compute this graph
     * @type {Array<string>}
     * @memberof GroupedGraph
     */
    attrKeys: Array<string>;
    /**
     * The edges in the graph; node indices in this collection refer to `nodes`.
     * @type {Array<GroupedGraphEdge>}
     * @memberof GroupedGraph
     */
    edges: Array<GroupedGraphEdge>;
    /**
     * The nodes in the graph
     * @type {Array<GroupedGraphNode>}
     * @memberof GroupedGraph
     */
    nodes: Array<GroupedGraphNode>;
}

/**
 * Check if a given object implements the GroupedGraph interface.
 */
export function instanceOfGroupedGraph(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "attrKeys" in value;
    isInstance = isInstance && "edges" in value;
    isInstance = isInstance && "nodes" in value;

    return isInstance;
}

export function GroupedGraphFromJSON(json: any): GroupedGraph {
    return GroupedGraphFromJSONTyped(json, false);
}

export function GroupedGraphFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupedGraph {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attrKeys': json['attr_keys'],
        'edges': ((json['edges'] as Array<any>).map(GroupedGraphEdgeFromJSON)),
        'nodes': ((json['nodes'] as Array<any>).map(GroupedGraphNodeFromJSON)),
    };
}

export function GroupedGraphToJSON(value?: GroupedGraph | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attr_keys': value.attrKeys,
        'edges': ((value.edges as Array<any>).map(GroupedGraphEdgeToJSON)),
        'nodes': ((value.nodes as Array<any>).map(GroupedGraphNodeToJSON)),
    };
}

