/* tslint:disable */
/* eslint-disable */
/**
 * Modality REST API
 * Modality REST API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@auxon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TimelineOverview,
  Workspace,
  WorkspaceSegmentMetadata,
} from '../models';
import {
    TimelineOverviewFromJSON,
    TimelineOverviewToJSON,
    WorkspaceFromJSON,
    WorkspaceToJSON,
    WorkspaceSegmentMetadataFromJSON,
    WorkspaceSegmentMetadataToJSON,
} from '../models';

export interface ListSegmentTimelinesRequest {
    workspaceVersionId: string;
    ruleName: string;
    segmentName: string;
}

export interface ListWorkspaceSegmentsRequest {
    workspaceVersionId: string;
}

export interface ListWorkspaceTimelinesRequest {
    workspaceVersionId: string;
}

/**
 * 
 */
export class WorkspacesApi extends runtime.BaseAPI {

    /**
     * List all timelines in a specific segment
     * List all timelines in a specific segment
     */
    async listSegmentTimelinesRaw(requestParameters: ListSegmentTimelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimelineOverview>>> {
        if (requestParameters.workspaceVersionId === null || requestParameters.workspaceVersionId === undefined) {
            throw new runtime.RequiredError('workspaceVersionId','Required parameter requestParameters.workspaceVersionId was null or undefined when calling listSegmentTimelines.');
        }

        if (requestParameters.ruleName === null || requestParameters.ruleName === undefined) {
            throw new runtime.RequiredError('ruleName','Required parameter requestParameters.ruleName was null or undefined when calling listSegmentTimelines.');
        }

        if (requestParameters.segmentName === null || requestParameters.segmentName === undefined) {
            throw new runtime.RequiredError('segmentName','Required parameter requestParameters.segmentName was null or undefined when calling listSegmentTimelines.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auxon-Auth-Token"] = this.configuration.apiKey("X-Auxon-Auth-Token"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v2/workspaces/{workspace_version_id}/segments/{rule_name}/{segment_name}/timelines`.replace(`{${"workspace_version_id"}}`, encodeURIComponent(String(requestParameters.workspaceVersionId))).replace(`{${"rule_name"}}`, encodeURIComponent(String(requestParameters.ruleName))).replace(`{${"segment_name"}}`, encodeURIComponent(String(requestParameters.segmentName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimelineOverviewFromJSON));
    }

    /**
     * List all timelines in a specific segment
     * List all timelines in a specific segment
     */
    async listSegmentTimelines(requestParameters: ListSegmentTimelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimelineOverview>> {
        const response = await this.listSegmentTimelinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all workspace segments
     * List all workspace segments
     */
    async listWorkspaceSegmentsRaw(requestParameters: ListWorkspaceSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkspaceSegmentMetadata>>> {
        if (requestParameters.workspaceVersionId === null || requestParameters.workspaceVersionId === undefined) {
            throw new runtime.RequiredError('workspaceVersionId','Required parameter requestParameters.workspaceVersionId was null or undefined when calling listWorkspaceSegments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auxon-Auth-Token"] = this.configuration.apiKey("X-Auxon-Auth-Token"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v2/workspaces/{workspace_version_id}/segments`.replace(`{${"workspace_version_id"}}`, encodeURIComponent(String(requestParameters.workspaceVersionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkspaceSegmentMetadataFromJSON));
    }

    /**
     * List all workspace segments
     * List all workspace segments
     */
    async listWorkspaceSegments(requestParameters: ListWorkspaceSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkspaceSegmentMetadata>> {
        const response = await this.listWorkspaceSegmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all workspace timelines
     * List all workspace timelines
     */
    async listWorkspaceTimelinesRaw(requestParameters: ListWorkspaceTimelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimelineOverview>>> {
        if (requestParameters.workspaceVersionId === null || requestParameters.workspaceVersionId === undefined) {
            throw new runtime.RequiredError('workspaceVersionId','Required parameter requestParameters.workspaceVersionId was null or undefined when calling listWorkspaceTimelines.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auxon-Auth-Token"] = this.configuration.apiKey("X-Auxon-Auth-Token"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v2/workspaces/{workspace_version_id}/timelines`.replace(`{${"workspace_version_id"}}`, encodeURIComponent(String(requestParameters.workspaceVersionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimelineOverviewFromJSON));
    }

    /**
     * List all workspace timelines
     * List all workspace timelines
     */
    async listWorkspaceTimelines(requestParameters: ListWorkspaceTimelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimelineOverview>> {
        const response = await this.listWorkspaceTimelinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all workspaces
     * List all workspaces
     */
    async listWorkspacesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Workspace>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auxon-Auth-Token"] = this.configuration.apiKey("X-Auxon-Auth-Token"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v2/workspaces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkspaceFromJSON));
    }

    /**
     * List all workspaces
     * List all workspaces
     */
    async listWorkspaces(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Workspace>> {
        const response = await this.listWorkspacesRaw(initOverrides);
        return await response.value();
    }

}
