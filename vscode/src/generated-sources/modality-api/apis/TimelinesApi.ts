/* tslint:disable */
/* eslint-disable */
/**
 * Modality REST API
 * Modality REST API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@auxon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Timeline,
} from '../models';
import {
    TimelineFromJSON,
    TimelineToJSON,
} from '../models';

export interface GetTimelineRequest {
    timelineId: string;
}

/**
 * 
 */
export class TimelinesApi extends runtime.BaseAPI {

    /**
     * Get a single timeline
     * Get a single timeline
     */
    async getTimelineRaw(requestParameters: GetTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Timeline>> {
        if (requestParameters.timelineId === null || requestParameters.timelineId === undefined) {
            throw new runtime.RequiredError('timelineId','Required parameter requestParameters.timelineId was null or undefined when calling getTimeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auxon-Auth-Token"] = this.configuration.apiKey("X-Auxon-Auth-Token"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/v2/timelines/{timeline_id}`.replace(`{${"timeline_id"}}`, encodeURIComponent(String(requestParameters.timelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimelineFromJSON(jsonValue));
    }

    /**
     * Get a single timeline
     * Get a single timeline
     */
    async getTimeline(requestParameters: GetTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Timeline> {
        const response = await this.getTimelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
