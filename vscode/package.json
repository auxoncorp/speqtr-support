{
    "name": "speqtr",
    "displayName": "speqtr",
    "description": "Syntax Highlighting and Language Server integration for Auxon's SpeQTr specification and query language",
    "publisher": "auxoncorp",
    "version": "0.2.1",
    "repository": "https://github.com/auxoncorp/speqtr-support",
    "icon": "images/speqtr-icon.png",
    "engines": {
        "vscode": "^1.77.0"
    },
    "categories": [
        "Programming Languages"
    ],
    "contributes": {
        "languages": [
            {
                "id": "speqtr",
                "aliases": [
                    "SpeQTr",
                    "speqtr"
                ],
                "extensions": [
                    ".speqtr"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "speqtr",
                "scopeName": "source.speqtr",
                "path": "./syntaxes/speqtr.tmLanguage.json"
            }
        ],
        "problemMatchers": [
            {
                "name": "conformEval",
                "owner": "speqtr",
                "source": "SpeQTr evaluation",
                "fileLocation": [
                    "autoDetect",
                    "${workspaceRoot}"
                ],
                "pattern": [
                    {
                        "regexp": "^(error): Error at (.*):(\\d+,\\d+,\\d+,\\d+):\\s+(.*)$",
                        "severity": 1,
                        "file": 2,
                        "location": 3,
                        "message": 4
                    }
                ]
            }
        ],
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "auxon-explorer",
                    "title": "Auxon",
                    "icon": "images/Auxon_symbol-whitesquare.svg"
                }
            ]
        },
        "views": {
            "auxon-explorer": [
                {
                    "id": "auxon.workspaces",
                    "name": "Workspaces"
                },
                {
                    "id": "auxon.segments",
                    "name": "Segments"
                },
                {
                    "id": "auxon.timelines",
                    "name": "Timelines"
                },
                {
                    "id": "auxon.events",
                    "name": "Events"
                },
                {
                    "id": "auxon.specs",
                    "name": "Specs"
                }
            ]
        },
        "menus": {
            "explorer/context": [
                {
                    "command": "auxon.specDir.eval.dryRun",
                    "when": "resource in auxon.specFolders",
                    "group": "1_auxon@1"
                },
                {
                    "command": "auxon.specDir.eval",
                    "when": "resource in auxon.specFolders",
                    "group": "1_auxon@2"
                },
                {
                    "command": "auxon.specFile.eval.dryRun",
                    "when": "resourceLangId == speqtr",
                    "group": "1_auxon@1"
                },
                {
                    "command": "auxon.specFile.eval",
                    "when": "resourceLangId == speqtr",
                    "group": "1_auxon@2"
                },
                {
                    "command": "auxon.specFile.create",
                    "when": "resourceLangId == speqtr",
                    "group": "1_auxon@3"
                }
            ],
            "view/item/context": [
                {
                    "command": "auxon.workspaces.setActive",
                    "when": "view == auxon.workspaces && viewItem == workspace",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.modality.log",
                    "when": "view == auxon.segments || view == auxon.timelines",
                    "group": "inline"
                },
                {
                    "command": "auxon.segments.setActive",
                    "when": "(view == auxon.segments && viewItem == segment) && !listMultiSelection"
                },
                {
                    "command": "auxon.segments.setActiveFromSelection",
                    "when": "(view == auxon.segments && viewItem == segment) && listMultiSelection"
                },
                {
                    "command": "auxon.segments.transitionGraph",
                    "when": "view == auxon.segments"
                },
                {
                    "command": "auxon.segments.specCoverage",
                    "when": "view == auxon.segments"
                },
                {
                    "command": "auxon.timelines.inspect",
                    "when": "view == auxon.timelines && viewItem == timeline"
                },
                {
                    "command": "auxon.timelines.transitionGraph",
                    "when": "view == auxon.timelines && !listMultiSelection"
                },
                {
                    "command": "auxon.timelines.transitionGraphForSelection",
                    "when": "view == auxon.timelines && listMultiSelection"
                },
                {
                    "command": "auxon.timelines.logSelected",
                    "when": "view == auxon.timelines && listMultiSelection"
                },
                {
                    "command": "auxon.events.createEventTimingNotebook",
                    "when": "view == auxon.events && viewItem == event"
                },
                {
                    "command": "auxon.events.createEventAttrNotebook",
                    "when": "view == auxon.events && viewItem == eventAttribute"
                },
                {
                    "command": "auxon.specs.showLatest",
                    "when": "view == auxon.specs && viewItem == spec && !listMultiSelection",
                    "group": "1_context@1"
                },
                {
                    "command": "auxon.specs.evalLatest",
                    "when": "view == auxon.specs && viewItem == spec && !listMultiSelection",
                    "group": "1_context@2"
                },
                {
                    "command": "auxon.specs.evalLatest.dryRun",
                    "when": "view == auxon.specs && viewItem == spec && !listMultiSelection",
                    "group": "1_context@3"
                },
                {
                    "command": "auxon.specs.rename",
                    "when": "view == auxon.specs && viewItem == spec && !listMultiSelection && false",
                    "group": "2_context@1"
                },
                {
                    "command": "auxon.specs.delete",
                    "when": "view == auxon.specs && viewItem == spec && !listMultiSelection",
                    "group": "2_context@2"
                },
                {
                    "command": "auxon.specs.deleteMany",
                    "when": "view == auxon.specs && viewItem == spec && listMultiSelection",
                    "group": "2_context@2"
                },
                {
                    "command": "auxon.specs.showVersion",
                    "when": "view == auxon.specs && viewItem == specVersion && !listMultiSelection && false",
                    "group": "1_context@1"
                },
                {
                    "command": "auxon.specs.evalVersion",
                    "when": "view == auxon.specs && viewItem == specVersion && !listMultiSelection",
                    "group": "1_context@2"
                },
                {
                    "command": "auxon.specs.evalManyVersions",
                    "when": "view == auxon.specs && viewItem == specVersion && listMultiSelection && false",
                    "group": "1_context@2"
                },
                {
                    "command": "auxon.specs.evalVersion.dryRun",
                    "when": "view == auxon.specs && viewItem == specVersion && !listMultiSelection",
                    "group": "1_context@3"
                },
                {
                    "command": "auxon.specs.evalManyVersions.dryRun",
                    "when": "view == auxon.specs && viewItem == specVersion && listMultiSelection && false",
                    "group": "1_context@3"
                },
                {
                    "command": "auxon.specs.deleteVersion",
                    "when": "view == auxon.specs && viewItem == specVersion && !listMultiSelection",
                    "group": "2_context@1"
                },
                {
                    "command": "auxon.specs.deleteManyVersions",
                    "when": "view == auxon.specs && viewItem == specVersion && listMultiSelection && false",
                    "group": "2_context@1"
                },
                {
                    "command": "auxon.specs.showResult",
                    "when": "view == auxon.specs && viewItem == specResult && !listMultiSelection && false",
                    "group": "1_context@1"
                },
                {
                    "command": "auxon.specs.deleteResult",
                    "when": "view == auxon.specs && viewItem == specResult && !listMultiSelection && false",
                    "group": "2_context@2"
                },
                {
                    "command": "auxon.specs.deleteManyResults",
                    "when": "view == auxon.specs && viewItem == specResult && listMultiSelection && false",
                    "group": "2_context@2"
                }
            ],
            "view/title": [
                {
                    "command": "auxon.workspaces.refresh",
                    "when": "view == auxon.workspaces",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.segments.refresh",
                    "when": "view == auxon.segments",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.segments.setLatestActive",
                    "when": "view == auxon.segments",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.segments.setAllActive",
                    "when": "view == auxon.segments",
                    "group": "7_modification@2"
                },
                {
                    "command": "auxon.segments.setWholeWorkspaceActive",
                    "when": "view == auxon.segments",
                    "group": "7_modification@3"
                },
                {
                    "command": "auxon.timelines.refresh",
                    "when": "view == auxon.timelines",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.timelines.disableTimelineGrouping",
                    "when": "view == auxon.timelines",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.timelines.setGroupingAttrs",
                    "when": "view == auxon.timelines",
                    "group": "7_modification@2"
                },
                {
                    "command": "auxon.timelines.groupTimelinesByNameComponents",
                    "when": "view == auxon.timelines",
                    "group": "7_modification@3"
                },
                {
                    "command": "auxon.events.refresh",
                    "when": "view == auxon.events",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.specs.refresh",
                    "when": "view == auxon.specs",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.specs.showVersions",
                    "when": "view == auxon.specs && auxon.specs.versions == 'HIDE'",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.specs.hideVersions",
                    "when": "view == auxon.specs && auxon.specs.versions == 'SHOW'",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.specs.showResults",
                    "when": "view == auxon.specs && auxon.specs.results == 'HIDE'",
                    "group": "7_modification@2"
                },
                {
                    "command": "auxon.specs.hideResults",
                    "when": "view == auxon.specs && auxon.specs.results == 'SHOW'",
                    "group": "7_modification@2"
                }
            ]
        },
        "commands": [
            {
                "command": "auxon.workspaces.refresh",
                "title": "Refresh Workspace List",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.workspaces.setActive",
                "title": "Set this Workspace as Active",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.segments.refresh",
                "title": "Refresh Segment List",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.segments.setActive",
                "title": "Set this Segment as Active"
            },
            {
                "command": "auxon.segments.setActiveFromSelection",
                "title": "Set Selected Segments as Active"
            },
            {
                "command": "auxon.segments.setLatestActive",
                "title": "Set Latest Segment as Active Data"
            },
            {
                "command": "auxon.segments.setAllActive",
                "title": "Set All Contained Segments as Active Data, Individually"
            },
            {
                "command": "auxon.segments.setWholeWorkspaceActive",
                "title": "Set All Workspace Content as Active Data, as a Single Universe"
            },
            {
                "command": "auxon.segments.transitionGraph",
                "title": "View Transition Graph"
            },
            {
                "command": "auxon.segments.specCoverage",
                "title": "View Specification Coverage"
            },
            {
                "command": "auxon.timelines.refresh",
                "title": "Refresh Timeline List",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.timelines.disableTimelineGrouping",
                "title": "Show timelines in flat list",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.timelines.setGroupingAttrs",
                "title": "Group timelines by attribute",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.timelines.groupTimelinesByNameComponents",
                "title": "Group timelines by name components",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.timelines.inspect",
                "title": "Inspect Timeline"
            },
            {
                "command": "auxon.timelines.logSelected",
                "title": "Log Selected Timelines"
            },
            {
                "command": "auxon.timelines.transitionGraph",
                "title": "View Transition Graph"
            },
            {
                "command": "auxon.timelines.transitionGraphForSelection",
                "title": "View Transition Graph for Selection"
            },
            {
                "command": "auxon.events.refresh",
                "title": "Refresh Event List",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.events.setSelectedTimeline",
                "title": "Update events summary for the selected timeline"
            },
            {
                "command": "auxon.events.createEventTimingNotebook",
                "title": "View Event Timing Plots in a Jupyter Notebook"
            },
            {
                "command": "auxon.events.createEventAttrNotebook",
                "title": "View Attribute Plots in a Jupyter Notebook"
            },
            {
                "command": "auxon.specs.refresh",
                "title": "Refresh Spec List",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.specs.showVersions",
                "title": "Show Versions"
            },
            {
                "command": "auxon.specs.hideVersions",
                "title": "✓ Show Versions"
            },
            {
                "command": "auxon.specs.showResults",
                "title": "Show Results"
            },
            {
                "command": "auxon.specs.hideResults",
                "title": "✓ Show Results"
            },
            {
                "command": "auxon.specs.showLatest",
                "title": "Show spec at latest version"
            },
            {
                "command": "auxon.specs.evalLatest",
                "title": "Check spec at latest version (save results)"
            },
            {
                "command": "auxon.specs.evalLatest.dryRun",
                "title": "Check spec at latest version (dry run)"
            },
            {
                "command": "auxon.specs.rename",
                "title": "Rename spec..."
            },
            {
                "command": "auxon.specs.delete",
                "title": "Delete spec..."
            },
            {
                "command": "auxon.specs.deleteMany",
                "title": "Delete selected specs..."
            },
            {
                "command": "auxon.specs.evalVersion",
                "title": "Check spec at this verison (save results)"
            },
            {
                "command": "auxon.specs.evalManyVersions",
                "title": "Check selected spec verisons (save results)"
            },
            {
                "command": "auxon.specs.evalVersion.dryRun",
                "title": "Check spec at this version (dry run)"
            },
            {
                "command": "auxon.specs.evalManyVersions.dryRun",
                "title": "Check selected spec versions (dry run)"
            },
            {
                "command": "auxon.specs.showVersion",
                "title": "Show spec at this verison"
            },
            {
                "command": "auxon.specs.deleteVersion",
                "title": "Delete this version of the spec..."
            },
            {
                "command": "auxon.specs.deleteManyVersions",
                "title": "Delete selected spec versions..."
            },
            {
                "command": "auxon.specs.showResult",
                "title": "Show spec result"
            },
            {
                "command": "auxon.specs.deleteResult",
                "title": "Delete spec result..."
            },
            {
                "command": "auxon.specs.deleteManyResults",
                "title": "Delete selected spec results..."
            },
            {
                "command": "auxon.specDir.eval.dryRun",
                "title": "Check all specs in folder (dry run)"
            },
            {
                "command": "auxon.specDir.eval",
                "title": "Check all specs in folder (save results)..."
            },
            {
                "command": "auxon.specFile.eval.dryRun",
                "title": "Check spec file (dry run)"
            },
            {
                "command": "auxon.specFile.eval",
                "title": "Check spec file (save results)..."
            },
            {
                "command": "auxon.specFile.create",
                "title": "Upload spec file..."
            },
            {
                "command": "auxon.modality.log",
                "title": "View log",
                "icon": "$(open-preview)"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "Auxon SpeQTr",
            "properties": {
                "auxon.tooldir": {
                    "type": [
                        "null",
                        "string"
                    ],
                    "scope": "machine-overridable",
                    "default": null,
                    "markdownDescription": "The directory where the Auxon tool binaries (modality, conform, etc) may be found. "
                },
                "auxon.authToken": {
                    "type": [
                        "null",
                        "string"
                    ],
                    "scope": "machine-overridable",
                    "default": null,
                    "markdownDescription": "The user authentication token to use when connecting to the Modality backend. If not given, defaults to the auth token configured in the Modality CLI."
                },
                "auxon.modalityUrl": {
                    "type": [
                        "null",
                        "string"
                    ],
                    "scope": "machine-overridable",
                    "default": null,
                    "markdownDescription": "The URL of the Auxon Modality backend server. If not given defaults, to the URL configured in the Modality CLI, or else to 'http://localhost:14181'."
                },
                "auxon.allowInsecureHttps": {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "scope": "machine-overridable",
                    "default": null,
                    "markdownDescription": "Ignore certificate validation for https connections. If not given, defaults to the setting configured in the Modality CLI, or else to false."
                },
                "auxon.extraEnv": {
                    "type": [
                        "null",
                        "object"
                    ],
                    "additionalProperties": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "default": null,
                    "markdownDescription": "Extra environment variables that will be passed tool executables, including the SpeQTr LSP server."
                }
            }
        }
    },
    "main": "out/main.js",
    "scripts": {
        "vscode:prepublish": "npm run build-base -- --minify",
        "package": "vsce package -o speqtr.vsix",
        "build-base": "esbuild ./src/main.ts --bundle --outfile=out/main.js --external:vscode --format=cjs --platform=node --target=node16",
        "build": "npm run build-base -- --sourcemap",
        "watch": "npm run build-base -- --sourcemap --watch",
        "pretest": "tsc -p ./",
        "test": "node ./out/src/test/runTest.js",
        "lint": "tsc -p ./ --noemit && eslint ./src && prettier --check .",
        "fix": "prettier --write . && eslint ./src --fix",
        "codegen": "openapi-typescript src/modality-api.json --output generated/"
    },
    "extensionDependencies": [
        "tintinweb.graphviz-interactive-preview"
    ],
    "dependencies": {
        "@types/lodash": "^4.14.200",
        "@viz-js/viz": "^3.0.1",
        "lodash": "^4.17.21",
        "node-fetch": "https://github.com/mullr/node-fetch",
        "openapi-fetch": "^0.0.8",
        "vscode-languageclient": "^7.0.0"
    },
    "postinstall": "cd ./node_modules/node-fetch && npm install && npm run build",
    "devDependencies": {
        "@types/mocha": "^9.1.0",
        "@types/node": "^16.11.7",
        "@types/vscode": "^1.77.0",
        "@typescript-eslint/eslint-plugin": "^5.56.0",
        "@typescript-eslint/parser": "^5.56.0",
        "@vscode/test-electron": "^1.6.1",
        "@vscode/vsce": "^2.9.2",
        "esbuild": "^0.14.48",
        "eslint": "^8.13.0",
        "mocha": "^9.2.1",
        "openapi-typescript": "^6.2.1",
        "prettier": "^2.8.7",
        "typescript": "^4.7.2",
        "typescript-eslint-language-service": "^5.0.5"
    },
    "prettier": {
        "tabWidth": 4,
        "printWidth": 120
    }
}
