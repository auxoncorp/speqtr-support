{
    "name": "speqtr",
    "displayName": "auxon",
    "description": "Auxon's UI extension: data visualization for Modality, and syntax highlighting and language server integration for the SpeQTr specification language",
    "publisher": "auxoncorp",
    "version": "0.5.1",
    "repository": "https://github.com/auxoncorp/speqtr-support",
    "icon": "images/speqtr-icon.png",
    "engines": {
        "vscode": "^1.77.0"
    },
    "categories": [
        "Testing",
        "Programming Languages",
        "Visualization",
        "Notebooks"
    ],
    "keywords": [
        "auxon",
        "modality",
        "conform",
        "speqtr"
    ],
    "contributes": {
        "languages": [
            {
                "id": "speqtr",
                "aliases": [
                    "SpeQTr",
                    "speqtr"
                ],
                "extensions": [
                    ".speqtr"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "speqtr",
                "scopeName": "source.speqtr",
                "path": "./syntaxes/speqtr.tmLanguage.json"
            }
        ],
        "problemMatchers": [
            {
                "name": "conformEval",
                "owner": "speqtr",
                "source": "SpeQTr evaluation",
                "fileLocation": [
                    "autoDetect",
                    "${workspaceRoot}"
                ],
                "pattern": [
                    {
                        "regexp": "^(error): Error at (.*):(\\d+,\\d+,\\d+,\\d+):\\s+(.*)$",
                        "severity": 1,
                        "file": 2,
                        "location": 3,
                        "message": 4
                    }
                ]
            }
        ],
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "modality-explorer",
                    "title": "Auxon Modality",
                    "icon": "images/Modality_symbol.svg"
                },
                {
                    "id": "conform-explorer",
                    "title": "Auxon Conform",
                    "icon": "images/Conform_symbol.svg"
                },
                {
                    "id": "deviant-explorer",
                    "title": "Auxon Deviant",
                    "icon": "images/Deviant_symbol.svg"
                }
            ]
        },
        "views": {
            "modality-explorer": [
                {
                    "id": "auxon.modality_workspaces",
                    "name": "Workspaces"
                },
                {
                    "id": "auxon.modality_segments",
                    "name": "Segments"
                },
                {
                    "id": "auxon.timelines",
                    "name": "Timelines"
                },
                {
                    "id": "auxon.events",
                    "name": "Events"
                }
            ],
            "conform-explorer": [
                {
                    "id": "auxon.conform_workspaces",
                    "name": "Workspaces"
                },
                {
                    "id": "auxon.conform_segments",
                    "name": "Segments"
                },
                {
                    "id": "auxon.specs",
                    "name": "Specs"
                }
            ],
            "deviant-explorer": [
                {
                    "id": "auxon.deviant_workspaces",
                    "name": "Workspaces"
                },
                {
                    "id": "auxon.deviant_segments",
                    "name": "Segments"
                },
                {
                    "id": "auxon.mutators",
                    "name": "Mutators"
                },
                {
                    "id": "auxon.mutations",
                    "name": "Mutations"
                },
                {
                    "id": "auxon.experiments",
                    "name": "Experiments"
                }
            ]
        },
        "menus": {
            "explorer/context": [
                {
                    "command": "auxon.specDir.eval.dryRun",
                    "when": "resource in auxon.specFolders",
                    "group": "1_auxon@1"
                },
                {
                    "command": "auxon.specDir.eval",
                    "when": "resource in auxon.specFolders",
                    "group": "1_auxon@2"
                },
                {
                    "command": "auxon.specFile.eval.dryRun",
                    "when": "resourceLangId == speqtr",
                    "group": "1_auxon@1"
                },
                {
                    "command": "auxon.specFile.eval",
                    "when": "resourceLangId == speqtr",
                    "group": "1_auxon@2"
                },
                {
                    "command": "auxon.specFile.create",
                    "when": "resourceLangId == speqtr",
                    "group": "1_auxon@3"
                },
                {
                    "command": "auxon.experimentFile.create",
                    "when": "resourceLangId == toml",
                    "group": "1_auxon@3"
                }
            ],
            "view/item/context": [
                {
                    "command": "auxon.workspaces.setActive",
                    "when": "view =~ /auxon\\.[a-zA-Z]*_workspaces/ && viewItem == workspace",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.modality.log",
                    "when": "view =~ /auxon\\.[a-zA-Z]*_segments/ || (view == auxon.timelines && viewItem == timeline) || (view == auxon.events && viewItem == event)",
                    "group": "inline"
                },
                {
                    "command": "auxon.segments.setActive",
                    "when": "(view =~ /auxon\\.[a-zA-Z]*_segments/ && viewItem == segment) && !listMultiSelection"
                },
                {
                    "command": "auxon.segments.setActiveFromSelection",
                    "when": "(view =~ /auxon\\.[a-zA-Z]*_segments/ && viewItem == segment) && listMultiSelection"
                },
                {
                    "command": "auxon.segments.transitionGraph",
                    "when": "view =~ /auxon\\.[a-zA-Z]*_segments/"
                },
                {
                    "command": "auxon.segments.specCoverage",
                    "when": "view =~ /auxon\\.[a-zA-Z]*_segments/"
                },
                {
                    "command": "auxon.timelines.inspect",
                    "when": "view == auxon.timelines && viewItem == timeline"
                },
                {
                    "command": "auxon.timelines.transitionGraph",
                    "when": "view == auxon.timelines && !listMultiSelection"
                },
                {
                    "command": "auxon.timelines.transitionGraphForSelection",
                    "when": "view == auxon.timelines && listMultiSelection"
                },
                {
                    "command": "auxon.timelines.logSelected",
                    "when": "view == auxon.timelines && listMultiSelection"
                },
                {
                    "command": "auxon.events.createEventTimingNotebook",
                    "when": "view == auxon.events && viewItem == event"
                },
                {
                    "command": "auxon.events.createEventAttrNotebook",
                    "when": "view == auxon.events && viewItem == eventAttribute"
                },
                {
                    "command": "auxon.events.logSelected",
                    "when": "view == auxon.events && listMultiSelection && viewItem == event"
                },
                {
                    "command": "auxon.events.inspect",
                    "when": "view == auxon.events && viewItem == event"
                },
                {
                    "command": "auxon.specs.showLatest",
                    "when": "view == auxon.specs && viewItem == spec && !listMultiSelection",
                    "group": "1_context@1"
                },
                {
                    "command": "auxon.specs.evalLatest",
                    "when": "view == auxon.specs && viewItem == spec && !listMultiSelection",
                    "group": "1_context@2"
                },
                {
                    "command": "auxon.specs.evalLatest.dryRun",
                    "when": "view == auxon.specs && viewItem == spec && !listMultiSelection",
                    "group": "1_context@3"
                },
                {
                    "command": "auxon.specs.rename",
                    "when": "view == auxon.specs && viewItem == spec && !listMultiSelection && false",
                    "group": "2_context@1"
                },
                {
                    "command": "auxon.specs.coverage.spec",
                    "when": "view == auxon.specs && viewItem == spec && !listMultiSelection",
                    "group": "1_context@1"
                },
                {
                    "command": "auxon.specs.coverage.manySpecs",
                    "when": "view == auxon.specs && viewItem == spec && listMultiSelection",
                    "group": "1_context@1"
                },
                {
                    "command": "auxon.specs.delete",
                    "when": "view == auxon.specs && viewItem == spec && !listMultiSelection",
                    "group": "2_context@2"
                },
                {
                    "command": "auxon.specs.deleteMany",
                    "when": "view == auxon.specs && viewItem == spec && listMultiSelection",
                    "group": "2_context@2"
                },
                {
                    "command": "auxon.specs.showVersion",
                    "when": "view == auxon.specs && viewItem == specVersion && !listMultiSelection && false",
                    "group": "1_context@1"
                },
                {
                    "command": "auxon.specs.coverage.version",
                    "when": "view == auxon.specs && viewItem == specVersion && !listMultiSelection",
                    "group": "1_context@1"
                },
                {
                    "command": "auxon.specs.coverage.manyVersions",
                    "when": "view == auxon.specs && viewItem == specVersion && listMultiSelection",
                    "group": "1_context@1"
                },
                {
                    "command": "auxon.specs.evalVersion",
                    "when": "view == auxon.specs && viewItem == specVersion && !listMultiSelection",
                    "group": "1_context@2"
                },
                {
                    "command": "auxon.specs.evalManyVersions",
                    "when": "view == auxon.specs && viewItem == specVersion && listMultiSelection && false",
                    "group": "1_context@2"
                },
                {
                    "command": "auxon.specs.evalVersion.dryRun",
                    "when": "view == auxon.specs && viewItem == specVersion && !listMultiSelection",
                    "group": "1_context@3"
                },
                {
                    "command": "auxon.specs.evalManyVersions.dryRun",
                    "when": "view == auxon.specs && viewItem == specVersion && listMultiSelection && false",
                    "group": "1_context@3"
                },
                {
                    "command": "auxon.specs.deleteVersion",
                    "when": "view == auxon.specs && viewItem == specVersion && !listMultiSelection",
                    "group": "2_context@1"
                },
                {
                    "command": "auxon.specs.deleteManyVersions",
                    "when": "view == auxon.specs && viewItem == specVersion && listMultiSelection && false",
                    "group": "2_context@1"
                },
                {
                    "command": "auxon.specs.coverage.result",
                    "when": "view == auxon.specs && viewItem == specResult && !listMultiSelection",
                    "group": "1_context@1"
                },
                {
                    "command": "auxon.specs.coverage.manyResults",
                    "when": "view == auxon.specs && ((viewItem == specResult && listMultiSelection) || (viewItem == specResults))",
                    "group": "1_context@1"
                },
                {
                    "command": "auxon.specs.showResult",
                    "when": "view == auxon.specs && viewItem == specResult && !listMultiSelection && false",
                    "group": "1_context@1"
                },
                {
                    "command": "auxon.specs.deleteResult",
                    "when": "view == auxon.specs && viewItem == specResult && !listMultiSelection && false",
                    "group": "2_context@2"
                },
                {
                    "command": "auxon.specs.deleteManyResults",
                    "when": "view == auxon.specs && viewItem == specResult && listMultiSelection && false",
                    "group": "2_context@2"
                },
                {
                    "command": "auxon.mutators.createMutation",
                    "when": "view == auxon.mutators && viewItem == mutator",
                    "group": "inline"
                },
                {
                    "command": "auxon.mutations.clearMutation",
                    "when": "view == auxon.mutations && viewItem == mutation",
                    "group": "inline"
                },
                {
                    "command": "auxon.mutations.viewLogFromMutation",
                    "when": "view == auxon.mutations && viewItem == mutationCoordinate",
                    "group": "inline"
                },
                {
                    "command": "auxon.experiments.viewSpec",
                    "when": "view == auxon.experiments && viewItem == experimentSpec",
                    "group": "inline"
                },
                {
                    "command": "auxon.experiments.impact",
                    "when": "view == auxon.experiments && viewItem == experiment",
                    "group": "inline"
                }
            ],
            "view/title": [
                {
                    "command": "auxon.workspaces.refresh",
                    "when": "view =~ /auxon\\.[a-zA-Z]*_workspaces/",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.segments.refresh",
                    "when": "view =~ /auxon\\.[a-zA-Z]*_segments/",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.segments.setLatestActive",
                    "when": "view =~ /auxon\\.[a-zA-Z]*_segments/",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.segments.setAllActive",
                    "when": "view =~ /auxon\\.[a-zA-Z]*_segments/",
                    "group": "7_modification@2"
                },
                {
                    "command": "auxon.segments.setWholeWorkspaceActive",
                    "when": "view =~ /auxon\\.[a-zA-Z]*_segments/",
                    "group": "7_modification@3"
                },
                {
                    "command": "auxon.timelines.refresh",
                    "when": "view == auxon.timelines",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.timelines.setGroupingAttrs",
                    "when": "view == auxon.timelines && auxon.timelinesGroupingMode != 'BY_ATTRIBUTES'",
                    "group": "7_modification@2"
                },
                {
                    "command": "auxon.timelines.clearGroupingAttrs",
                    "when": "view == auxon.timelines && auxon.timelinesGroupingMode == 'BY_ATTRIBUTES'",
                    "group": "7_modification@2"
                },
                {
                    "command": "auxon.timelines.groupTimelinesByNameComponents",
                    "when": "view == auxon.timelines && auxon.timelinesGroupingMode != 'BY_NAME_COMPONENTS'",
                    "group": "7_modification@3"
                },
                {
                    "command": "auxon.timelines.clearGroupTimelinesByNameComponents",
                    "when": "view == auxon.timelines && auxon.timelinesGroupingMode == 'BY_NAME_COMPONENTS'",
                    "group": "7_modification@3"
                },
                {
                    "command": "auxon.events.refresh",
                    "when": "view == auxon.events",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.specs.refresh",
                    "when": "view == auxon.specs",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.specs.showVersions",
                    "when": "view == auxon.specs && auxon.specs.versions == 'HIDE'",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.specs.hideVersions",
                    "when": "view == auxon.specs && auxon.specs.versions == 'SHOW'",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.specs.showResults",
                    "when": "view == auxon.specs && auxon.specs.results == 'HIDE'",
                    "group": "7_modification@2"
                },
                {
                    "command": "auxon.specs.hideResults",
                    "when": "view == auxon.specs && auxon.specs.results == 'SHOW'",
                    "group": "7_modification@2"
                },
                {
                    "command": "auxon.deviant.clearAllMutations",
                    "when": "view == auxon.mutations",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.mutators.refresh",
                    "when": "view == auxon.mutators",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.mutators.filterByDataScope",
                    "when": "view == auxon.mutators && auxon.mutators.filterByDataScope == 'UNSET'",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.mutators.unfilterByDataScope",
                    "when": "view == auxon.mutators && auxon.mutators.filterByDataScope == 'SET'",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.mutators.showUnavailable",
                    "when": "view == auxon.mutators && auxon.mutators.unavailable == 'HIDE'",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.mutators.hideUnavailable",
                    "when": "view == auxon.mutators && auxon.mutators.unavailable == 'SHOW'",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.mutators.groupByName",
                    "when": "view == auxon.mutators && auxon.mutators.groupBy != 'MUTATOR_NAME'",
                    "group": "7_modification@3"
                },
                {
                    "command": "auxon.mutators.disableByNameGrouping",
                    "when": "view == auxon.mutators && auxon.mutators.groupBy == 'MUTATOR_NAME'",
                    "group": "7_modification@3"
                },
                {
                    "command": "auxon.mutators.groupByWorkspaceAttrs",
                    "when": "view == auxon.mutators && auxon.mutators.groupBy != 'WORKSPACE_ATTRS'",
                    "group": "7_modification@3"
                },
                {
                    "command": "auxon.mutators.disableByWorkspaceAttrsGrouping",
                    "when": "view == auxon.mutators && auxon.mutators.groupBy == 'WORKSPACE_ATTRS'",
                    "group": "7_modification@3"
                },
                {
                    "command": "auxon.mutations.refresh",
                    "when": "view == auxon.mutations",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.mutations.groupMutationsByName",
                    "when": "view == auxon.mutations && auxon.mutations.groupBy != 'MUTATOR_NAME'",
                    "group": "7_modification@3"
                },
                {
                    "command": "auxon.mutations.disableMutationGrouping",
                    "when": "view == auxon.mutations && auxon.mutations.groupBy == 'MUTATOR_NAME'",
                    "group": "7_modification@3"
                },
                {
                    "command": "auxon.mutations.filterBySelectedMutator",
                    "when": "view == auxon.mutations && auxon.mutations.filterBy != 'MUTATOR_ID'",
                    "group": "7_modification@3"
                },
                {
                    "command": "auxon.mutations.disableMutationFiltering",
                    "when": "view == auxon.mutations && auxon.mutations.filterBy == 'MUTATOR_ID'",
                    "group": "7_modification@3"
                },
                {
                    "command": "auxon.mutations.showCleared",
                    "when": "view == auxon.mutations && auxon.mutations.cleared == 'HIDE'",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.mutations.hideCleared",
                    "when": "view == auxon.mutations && auxon.mutations.cleared == 'SHOW'",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.experiments.refresh",
                    "when": "view == auxon.experiments",
                    "group": "navigation@1"
                },
                {
                    "command": "auxon.experiments.showResults",
                    "when": "view == auxon.experiments && auxon.experiments.results == 'HIDE'",
                    "group": "7_modification@1"
                },
                {
                    "command": "auxon.experiments.hideResults",
                    "when": "view == auxon.experiments && auxon.experiments.results == 'SHOW'",
                    "group": "7_modification@1"
                }
            ]
        },
        "commands": [
            {
                "command": "auxon.workspaces.refresh",
                "title": "Refresh Workspace List",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.workspaces.setActive",
                "title": "Set this Workspace as Active",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.segments.refresh",
                "title": "Refresh Segment List",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.segments.setActive",
                "title": "Set this Segment as Active"
            },
            {
                "command": "auxon.segments.setActiveFromSelection",
                "title": "Set Selected Segments as Active"
            },
            {
                "command": "auxon.segments.setLatestActive",
                "title": "Set Latest Segment as Active Data"
            },
            {
                "command": "auxon.segments.setAllActive",
                "title": "Set All Contained Segments as Active Data, Individually"
            },
            {
                "command": "auxon.segments.setWholeWorkspaceActive",
                "title": "Set All Workspace Content as Active Data, as a Single Universe"
            },
            {
                "command": "auxon.segments.transitionGraph",
                "title": "View Transition Graph"
            },
            {
                "command": "auxon.segments.specCoverage",
                "title": "Show Coverage of All Specs for Segment"
            },
            {
                "command": "auxon.timelines.refresh",
                "title": "Refresh Timeline List",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.timelines.setGroupingAttrs",
                "title": "Group timelines by attribute"
            },
            {
                "command": "auxon.timelines.clearGroupingAttrs",
                "title": "✓ Group timelines by attribute"
            },
            {
                "command": "auxon.timelines.groupTimelinesByNameComponents",
                "title": "Group timelines by name components"
            },
            {
                "command": "auxon.timelines.clearGroupTimelinesByNameComponents",
                "title": "✓ Group timelines by name components"
            },
            {
                "command": "auxon.timelines.inspect",
                "title": "Inspect Timeline"
            },
            {
                "command": "auxon.timelines.logSelected",
                "title": "Log Selected Timelines"
            },
            {
                "command": "auxon.timelines.transitionGraph",
                "title": "View Transition Graph"
            },
            {
                "command": "auxon.timelines.transitionGraphForSelection",
                "title": "View Transition Graph for Selection"
            },
            {
                "command": "auxon.events.refresh",
                "title": "Refresh Event List",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.events.setSelectedTimeline",
                "title": "Update events summary for the selected timeline"
            },
            {
                "command": "auxon.events.createEventTimingNotebook",
                "title": "View Event Timing Plots in a Jupyter Notebook"
            },
            {
                "command": "auxon.events.createEventAttrNotebook",
                "title": "View Attribute Plots in a Jupyter Notebook"
            },
            {
                "command": "auxon.events.logSelected",
                "title": "Log Selected Events"
            },
            {
                "command": "auxon.events.inspect",
                "title": "Inspect Event"
            },
            {
                "command": "auxon.specs.refresh",
                "title": "Refresh Spec List",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.specs.coverage.spec",
                "title": "Coverage Report for this Spec (latest version)"
            },
            {
                "command": "auxon.specs.coverage.manySpecs",
                "title": "Coverage Report for Selected Specs (latest version)"
            },
            {
                "command": "auxon.specs.coverage.version",
                "title": "Coverage Report for this Spec Version"
            },
            {
                "command": "auxon.specs.coverage.manyVersions",
                "title": "Coverage Report for Selected Versions"
            },
            {
                "command": "auxon.specs.coverage.result",
                "title": "Coverage Report for this Result"
            },
            {
                "command": "auxon.specs.coverage.manyResults",
                "title": "Coverage Report for Selected Results"
            },
            {
                "command": "auxon.specs.showVersions",
                "title": "Show Versions"
            },
            {
                "command": "auxon.specs.hideVersions",
                "title": "✓ Show Versions"
            },
            {
                "command": "auxon.specs.showResults",
                "title": "Show Results"
            },
            {
                "command": "auxon.specs.hideResults",
                "title": "✓ Show Results"
            },
            {
                "command": "auxon.specs.showLatest",
                "title": "Show Spec at Latest Version"
            },
            {
                "command": "auxon.specs.evalLatest",
                "title": "Check Spec at Latest Version (save results)"
            },
            {
                "command": "auxon.specs.evalLatest.dryRun",
                "title": "Check Spec at Latest Version (dry run)"
            },
            {
                "command": "auxon.specs.rename",
                "title": "Rename Spec..."
            },
            {
                "command": "auxon.specs.delete",
                "title": "Delete Spec..."
            },
            {
                "command": "auxon.specs.deleteMany",
                "title": "Delete Selected Specs..."
            },
            {
                "command": "auxon.specs.evalVersion",
                "title": "Check Spec at This Verison (save results)"
            },
            {
                "command": "auxon.specs.evalManyVersions",
                "title": "Check Selected Spec Verisons (save results)"
            },
            {
                "command": "auxon.specs.evalVersion.dryRun",
                "title": "Check Spec at This Version (dry run)"
            },
            {
                "command": "auxon.specs.evalManyVersions.dryRun",
                "title": "Check Selected Spec Versions (dry run)"
            },
            {
                "command": "auxon.specs.showVersion",
                "title": "Show Spec at This Verison"
            },
            {
                "command": "auxon.specs.deleteVersion",
                "title": "Delete This Version of the Spec..."
            },
            {
                "command": "auxon.specs.deleteManyVersions",
                "title": "Delete Selected Spec Versions..."
            },
            {
                "command": "auxon.specs.showResult",
                "title": "Show Spec Result"
            },
            {
                "command": "auxon.specs.deleteResult",
                "title": "Delete Spec Result..."
            },
            {
                "command": "auxon.specs.deleteManyResults",
                "title": "Delete Selected Spec Results..."
            },
            {
                "command": "auxon.specs.revealSpec",
                "title": "Reveal a spec in the specs tree view"
            },
            {
                "command": "auxon.specDir.eval.dryRun",
                "title": "Check All Specs in Folder (dry run)"
            },
            {
                "command": "auxon.specDir.eval",
                "title": "Check All Specs in Folder (save results)..."
            },
            {
                "command": "auxon.specFile.eval.dryRun",
                "title": "Check Spec File (dry run)"
            },
            {
                "command": "auxon.specFile.eval",
                "title": "Check Spec File (save results)..."
            },
            {
                "command": "auxon.specFile.create",
                "title": "Upload Spec File..."
            },
            {
                "command": "auxon.modality.log",
                "title": "View Log",
                "icon": "$(open-preview)"
            },
            {
                "command": "auxon.modality.inspectEvent",
                "title": "Inspect Event"
            },
            {
                "command": "auxon.deviant.clearMutation",
                "title": "Clear Mutation"
            },
            {
                "command": "auxon.deviant.clearAllMutations",
                "title": "Clear All Mutations"
            },
            {
                "command": "auxon.deviant.createMutation",
                "title": "Create Mutation"
            },
            {
                "command": "auxon.deviant.runCreateMutationWizard",
                "title": "Create a Mutation"
            },
            {
                "command": "auxon.mutators.refresh",
                "title": "Refresh Mutator List",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.mutators.revealMutator",
                "title": "Reveal a mutator in the mutators tree view"
            },
            {
                "command": "auxon.mutators.filterByDataScope",
                "title": "Filter By Active Data Scope"
            },
            {
                "command": "auxon.mutators.unfilterByDataScope",
                "title": "✓ Filter By Active Data Scope"
            },
            {
                "command": "auxon.mutators.showUnavailable",
                "title": "Show Unavailable"
            },
            {
                "command": "auxon.mutators.hideUnavailable",
                "title": "✓ Show Unavailable"
            },
            {
                "command": "auxon.mutators.groupByName",
                "title": "Group By Mutator Name"
            },
            {
                "command": "auxon.mutators.disableByNameGrouping",
                "title": "✓ Group By Mutator Name"
            },
            {
                "command": "auxon.mutators.groupByWorkspaceAttrs",
                "title": "Group By Workspace Mutator Attributes"
            },
            {
                "command": "auxon.mutators.disableByWorkspaceAttrsGrouping",
                "title": "✓ Group By Workspace Mutator Attributes"
            },
            {
                "command": "auxon.mutators.createMutation",
                "title": "Create a Mutation",
                "icon": "$(zap)"
            },
            {
                "command": "auxon.mutations.refresh",
                "title": "Refresh Mutation List",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.mutations.setSelectedMutator",
                "title": "Set the selected mutator in the mutations tree view"
            },
            {
                "command": "auxon.mutations.revealMutation",
                "title": "Reveal a mutation in the mutations tree view"
            },
            {
                "command": "auxon.mutations.groupMutationsByName",
                "title": "Group By Mutator Name"
            },
            {
                "command": "auxon.mutations.disableMutationGrouping",
                "title": "✓ Group By Mutator Name"
            },
            {
                "command": "auxon.mutations.filterBySelectedMutator",
                "title": "Filter By Selected Mutator"
            },
            {
                "command": "auxon.mutations.disableMutationFiltering",
                "title": "✓ Filter By Selected Mutator"
            },
            {
                "command": "auxon.mutations.showCleared",
                "title": "Show Cleared Mutations"
            },
            {
                "command": "auxon.mutations.hideCleared",
                "title": "✓ Show Cleared Mutations"
            },
            {
                "command": "auxon.mutations.clearMutation",
                "title": "Clear Mutation",
                "icon": "$(notebook-state-error)"
            },
            {
                "command": "auxon.mutations.viewLogFromMutation",
                "title": "View Log from this Coordinate",
                "icon": "$(open-preview)"
            },
            {
                "command": "auxon.experimentFile.create",
                "title": "Upload Experiment File"
            },
            {
                "command": "auxon.experiments.refresh",
                "title": "Refresh Experiment List",
                "icon": "$(refresh)"
            },
            {
                "command": "auxon.experiments.showResults",
                "title": "Show Results"
            },
            {
                "command": "auxon.experiments.hideResults",
                "title": "✓ Show Results"
            },
            {
                "command": "auxon.experiments.viewSpec",
                "title": "View Spec",
                "icon": "$(file)"
            },
            {
                "command": "auxon.experiments.impact",
                "title": "Show Experiment Impact Report",
                "icon": "$(pulse)"
            },
            {
                "command": "auxon.experiments.visualizeImpactScenario",
                "title": "Visual Experiment Impact Scenario"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "Auxon",
            "properties": {
                "auxon.tooldir": {
                    "type": [
                        "null",
                        "string"
                    ],
                    "scope": "machine-overridable",
                    "default": null,
                    "markdownDescription": "The directory where the Auxon tool binaries (modality, conform, etc) may be found. "
                },
                "auxon.authToken": {
                    "type": [
                        "null",
                        "string"
                    ],
                    "scope": "machine-overridable",
                    "default": null,
                    "markdownDescription": "The user authentication token to use when connecting to the Modality backend. If not given, defaults to the auth token configured in the Modality CLI."
                },
                "auxon.modalityUrl": {
                    "type": [
                        "null",
                        "string"
                    ],
                    "scope": "machine-overridable",
                    "default": null,
                    "markdownDescription": "The URL of the Auxon Modality backend server. If not given defaults, to the URL configured in the Modality CLI, or else to 'http://localhost:14181'."
                },
                "auxon.allowInsecureHttps": {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "scope": "machine-overridable",
                    "default": null,
                    "markdownDescription": "Ignore certificate validation for https connections. If not given, defaults to the setting configured in the Modality CLI, or else to false."
                },
                "auxon.extraEnv": {
                    "type": [
                        "null",
                        "object"
                    ],
                    "additionalProperties": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "default": null,
                    "markdownDescription": "Extra environment variables that will be passed tool executables, including the SpeQTr LSP server."
                },
                "auxon.extraCliArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scope": "machine-overridable",
                    "default": {},
                    "markdownDescription": "Extra command line arguments for cli commands invoked by vscode. The map key is the full command name, like 'modality log'. The value is an array of arguments to append to the command invocation. "
                }
            }
        }
    },
    "main": "out/main.js",
    "scripts": {
        "copyResources": "node scripts/copyResources.js",
        "postinstall": "npm run copyResources",
        "vscode:prepublish": "npm run copyResources && npm run build-base -- --minify",
        "package": "vsce package -o speqtr.vsix",
        "build-base": "node scripts/build-base.mjs",
        "build": "npm run build-base -- --sourcemap",
        "watch": "npm run build-base -- --sourcemap --watch",
        "pretest": "tsc -p ./common-src && tsc -p ./src && tsc -p ./webview-src",
        "test": "node ./out/ts/extension/src/test/runTest.js",
        "lint": "tsc -p ./common-src && tsc -p ./src --noemit && tsc -p ./webview-src --noemit && eslint ./src && eslint ./webview-src && eslint ./common-src && prettier --check .",
        "fix": "prettier --write . && eslint ./src --fix && eslint ./webview-src --fix && eslint ./common-src --fix",
        "codegen": "openapi-typescript src/modality-api.json --output src/generated/"
    },
    "extensionDependencies": [
        "ms-toolsai.jupyter"
    ],
    "dependencies": {
        "@types/lodash": "^4.14.200",
        "@viz-js/viz": "^3.0.1",
        "@vscode/codicons": "^0.0.32",
        "@vscode/webview-ui-toolkit": "^1.4.0",
        "cytoscape": "^3.28.1",
        "cytoscape-context-menus": "^4.1.0",
        "cytoscape-cose-bilkent": "^4.1.0",
        "handlebars": "^4.7.8",
        "jquery": "^3.6.0",
        "js-base64": "^3.7.6",
        "lodash": "^4.17.21",
        "node-fetch": "https://github.com/mullr/node-fetch",
        "openapi-fetch": "^0.0.8",
        "tmp-promise": "^3.0.3",
        "vscode-languageclient": "^7.0.0"
    },
    "devDependencies": {
        "@types/cytoscape": "^3.19",
        "@types/cytoscape-context-menus": "^4.1.3",
        "@types/glob": "^8.1.0",
        "@types/jquery": "^3.5.29",
        "@types/mocha": "^9.1.0",
        "@types/node": "^16.11.7",
        "@types/vscode": "^1.77.0",
        "@types/vscode-webview": "^1.57",
        "@typescript-eslint/eslint-plugin": "^7.1.1",
        "@typescript-eslint/parser": "^7.1.1",
        "@vscode/test-electron": "^1.6.1",
        "@vscode/vsce": "^2.23.0",
        "esbuild": "^0.20.1",
        "eslint": "^8.57.0",
        "mocha": "^9.2.1",
        "openapi-typescript": "^6.2.1",
        "prettier": "^2.8.7",
        "typescript": "^5.3.3",
        "typescript-eslint-language-service": "^5.0.5"
    },
    "prettier": {
        "tabWidth": 4,
        "printWidth": 120
    }
}
